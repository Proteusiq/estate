version: '3.2'
services:
    redis:
        image: 'bitnami/redis:6.0.6'
        command: redis-server --requirepass ${REDIS_PASSWORD:-changeme}
        restart: always
        environment:
            #- ALLOW_EMPTY_PASSWORD=yes
            - REDIS_PASSWORD=${REDIS_PASSWORD:-changeme}
        volumes:
            - ./services/redis/redis-persistence:/bitnami/redis/data
        networks:
            - outside_net


    redisinsight:
      image: redislabs/redisinsight
      ports:
          - 8001:8001
      depends_on:
          - redis
       
      networks:
          - outside_net


    postgres:
        build:
            context: ./services/postgres
        environment:
            - POSTGRES_USER=${POSTGRES_USER:-postgres}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme}
            - POSTGRES_DB=airflow
        # Uncomment these lines to persist data on the local filesystem.
            - PGDATA=/var/lib/postgresql/data
        volumes:
            - pgdata:/var/lib/postgresql/data

        
        restart: always
        networks:
            - outside_net


    pgadmin:
        image: dpage/pgadmin4
        depends_on:
            - postgres
        ports:
            - 5050:80
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin@example.com}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
        restart: unless-stopped
        networks:
            - outside_net


    webserver:
        build:
            context: ./services/airflow
        restart: always
        depends_on:
            - postgres
            - redis
        environment:
            - LOAD_EX=n
            - FERNET_KEY=${FERNET_KEY}
            - EXECUTOR=Celery
            - AIRFLOW__WEBSERVER__RBAC=true
            - AIRFLOW__WEBSERVER__WORKERS=2
            - AIRFLOW__WEBSERVER__WORKER_REFRESH_INTERVAL=1800
            - AIRFLOW__WEBSERVER__WEB_SERVER_WORKER_TIMEOUT=300
            - ADMIN_USER=${ADMIN_USER:-danpra}
            - ADMIN_PASSWORD=${ADMIN_PASSWORD:-changeme}
            - POSTGRES_USER=${POSTGRES_USER:-postgres}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme}
            - POSTGRES_DB=airflow
            - REDIS_PASSWORD=${REDIS_PASSWORD:-changeme}
        volumes:
            - ./services/airflow/dags:/usr/local/airflow/dags
            # Uncomment to include custom plugins
            # - ./airflow/plugins:/usr/local/airflow/plugins
        ports:
            - "8080:8080"
        command: webserver
        healthcheck:
            test: ["CMD-SHELL", "[ -f /usr/local/airflow/airflow-webserver.pid ]"]
            interval: 30s
            timeout: 30s
            retries: 3
        links:
            - fluentd
        networks:
            - internal_net
            - outside_net

        logging:
            driver: "fluentd"
            options:
                fluentd-address: localhost:24224
                tag: airflow


    scheduler:
        build:
            context: ./services/airflow
        restart: always
        depends_on:
            - webserver
        volumes:
            - ./services/airflow/dags:/usr/local/airflow/dags
            # Uncomment to include custom plugins
            # - ./airflow/plugins:/usr/local/airflow/plugins
        environment:
            - LOAD_EX=n
            - FERNET_KEY=${FERNET_KEY}
            - EXECUTOR=Celery
            - POSTGRES_USER=${POSTGRES_USER:-postgres}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme}
            - POSTGRES_DB=airflow
            - REDIS_PASSWORD=${REDIS_PASSWORD:-changeme}
        command: scheduler

        networks:
            - internal_net
            - outside_net


    worker:
        build:
            context: ./services/airflow
        restart: always
        depends_on:
            - scheduler
        volumes:
            - ./services/airflow/dags:/usr/local/airflow/dags
            # Uncomment to include custom plugins
            # - ./airflow/plugins:/usr/local/airflow/plugins
        environment:
            - FERNET_KEY=${FERNET_KEY}
            - EXECUTOR=Celery
            - POSTGRES_USER=${POSTGRES_USER:-postgres}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme}
            - POSTGRES_DB=airflow
            - REDIS_PASSWORD=${REDIS_PASSWORD:-changeme}
        command: worker
        networks:
            - internal_net
            - outside_net

        logging:
            driver: "fluentd"
            options:
                fluentd-address: localhost:24224
                tag: airflow2

    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:$EFK_VERSION
        environment:
        - bootstrap.memory_lock=true
        - discovery.type=single-node
        - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
        - ELASTIC_PASSWORD=$ELASTIC_PASSWORD
        - xpack.security.enabled=$ELASTIC_SECURITY
        - xpack.license.self_generated.type=basic
        - xpack.monitoring.collection.enabled=true

        restart: always
        ulimits:
            memlock:
                soft: -1
                hard: -1
        volumes:
            - elasticsearch:/usr/share/elasticsearch/data

        ports:
            - 9200:9200
        networks:
            - internal_net

    kibana:
        image: docker.elastic.co/kibana/kibana:$EFK_VERSION
        environment:
            - ELASTICSEARCH_USERNAME=$ELASTIC_USER
            - ELASTICSEARCH_PASSWORD=$ELASTIC_PASSWORD
        ports:
            - 5601:5601
        networks:
            - internal_net
        links:
            - elasticsearch
        depends_on:
            - elasticsearch
            - fluentd
        restart: always

    fluentd:
        build: ./services/efk/fluentd
        container_name: fluentd
        volumes:
            - ./services/efk/fluentd/conf:/fluentd/etc
        depends_on:
            - elasticsearch
        restart: always
        ports:
            - "24224:24224"
            - "24224:24224/udp"
        networks:
            - internal_net

volumes:
    pgdata:
        external: true
    elasticsearch:

networks:
  internal_net:
    driver: bridge
  outside_net:
    driver: bridge




